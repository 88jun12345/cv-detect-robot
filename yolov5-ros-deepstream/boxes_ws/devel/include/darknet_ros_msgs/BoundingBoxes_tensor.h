// Generated by gencpp from file darknet_ros_msgs/BoundingBoxes_tensor.msg
// DO NOT EDIT!


#ifndef DARKNET_ROS_MSGS_MESSAGE_BOUNDINGBOXES_TENSOR_H
#define DARKNET_ROS_MSGS_MESSAGE_BOUNDINGBOXES_TENSOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <darknet_ros_msgs/BoundingBox_tensor.h>

namespace darknet_ros_msgs
{
template <class ContainerAllocator>
struct BoundingBoxes_tensor_
{
  typedef BoundingBoxes_tensor_<ContainerAllocator> Type;

  BoundingBoxes_tensor_()
    : boundingboxes_tensor()  {
    }
  BoundingBoxes_tensor_(const ContainerAllocator& _alloc)
    : boundingboxes_tensor(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::darknet_ros_msgs::BoundingBox_tensor_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::darknet_ros_msgs::BoundingBox_tensor_<ContainerAllocator> >::other >  _boundingboxes_tensor_type;
  _boundingboxes_tensor_type boundingboxes_tensor;





  typedef boost::shared_ptr< ::darknet_ros_msgs::BoundingBoxes_tensor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::darknet_ros_msgs::BoundingBoxes_tensor_<ContainerAllocator> const> ConstPtr;

}; // struct BoundingBoxes_tensor_

typedef ::darknet_ros_msgs::BoundingBoxes_tensor_<std::allocator<void> > BoundingBoxes_tensor;

typedef boost::shared_ptr< ::darknet_ros_msgs::BoundingBoxes_tensor > BoundingBoxes_tensorPtr;
typedef boost::shared_ptr< ::darknet_ros_msgs::BoundingBoxes_tensor const> BoundingBoxes_tensorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::darknet_ros_msgs::BoundingBoxes_tensor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::darknet_ros_msgs::BoundingBoxes_tensor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::darknet_ros_msgs::BoundingBoxes_tensor_<ContainerAllocator1> & lhs, const ::darknet_ros_msgs::BoundingBoxes_tensor_<ContainerAllocator2> & rhs)
{
  return lhs.boundingboxes_tensor == rhs.boundingboxes_tensor;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::darknet_ros_msgs::BoundingBoxes_tensor_<ContainerAllocator1> & lhs, const ::darknet_ros_msgs::BoundingBoxes_tensor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace darknet_ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::darknet_ros_msgs::BoundingBoxes_tensor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::darknet_ros_msgs::BoundingBoxes_tensor_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::darknet_ros_msgs::BoundingBoxes_tensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::darknet_ros_msgs::BoundingBoxes_tensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::darknet_ros_msgs::BoundingBoxes_tensor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::darknet_ros_msgs::BoundingBoxes_tensor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::darknet_ros_msgs::BoundingBoxes_tensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "28b99bb7e3f0d3196525501e81626006";
  }

  static const char* value(const ::darknet_ros_msgs::BoundingBoxes_tensor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x28b99bb7e3f0d319ULL;
  static const uint64_t static_value2 = 0x6525501e81626006ULL;
};

template<class ContainerAllocator>
struct DataType< ::darknet_ros_msgs::BoundingBoxes_tensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "darknet_ros_msgs/BoundingBoxes_tensor";
  }

  static const char* value(const ::darknet_ros_msgs::BoundingBoxes_tensor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::darknet_ros_msgs::BoundingBoxes_tensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "BoundingBox_tensor[] boundingboxes_tensor\n"
"\n"
"================================================================================\n"
"MSG: darknet_ros_msgs/BoundingBox_tensor\n"
"float64 probability\n"
"int64 top\n"
"int64 left\n"
"int64 width\n"
"int64 height\n"
"int16 id\n"
"string Class\n"
;
  }

  static const char* value(const ::darknet_ros_msgs::BoundingBoxes_tensor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::darknet_ros_msgs::BoundingBoxes_tensor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.boundingboxes_tensor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BoundingBoxes_tensor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::darknet_ros_msgs::BoundingBoxes_tensor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::darknet_ros_msgs::BoundingBoxes_tensor_<ContainerAllocator>& v)
  {
    s << indent << "boundingboxes_tensor[]" << std::endl;
    for (size_t i = 0; i < v.boundingboxes_tensor.size(); ++i)
    {
      s << indent << "  boundingboxes_tensor[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::darknet_ros_msgs::BoundingBox_tensor_<ContainerAllocator> >::stream(s, indent + "    ", v.boundingboxes_tensor[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DARKNET_ROS_MSGS_MESSAGE_BOUNDINGBOXES_TENSOR_H
