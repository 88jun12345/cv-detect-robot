// Generated by gencpp from file darknet_ros_msgs/BoundingBox_tensor.msg
// DO NOT EDIT!


#ifndef DARKNET_ROS_MSGS_MESSAGE_BOUNDINGBOX_TENSOR_H
#define DARKNET_ROS_MSGS_MESSAGE_BOUNDINGBOX_TENSOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace darknet_ros_msgs
{
template <class ContainerAllocator>
struct BoundingBox_tensor_
{
  typedef BoundingBox_tensor_<ContainerAllocator> Type;

  BoundingBox_tensor_()
    : probability(0.0)
    , top(0)
    , left(0)
    , width(0)
    , height(0)
    , id(0)
    , Class()  {
    }
  BoundingBox_tensor_(const ContainerAllocator& _alloc)
    : probability(0.0)
    , top(0)
    , left(0)
    , width(0)
    , height(0)
    , id(0)
    , Class(_alloc)  {
  (void)_alloc;
    }



   typedef double _probability_type;
  _probability_type probability;

   typedef int64_t _top_type;
  _top_type top;

   typedef int64_t _left_type;
  _left_type left;

   typedef int64_t _width_type;
  _width_type width;

   typedef int64_t _height_type;
  _height_type height;

   typedef int16_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Class_type;
  _Class_type Class;





  typedef boost::shared_ptr< ::darknet_ros_msgs::BoundingBox_tensor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::darknet_ros_msgs::BoundingBox_tensor_<ContainerAllocator> const> ConstPtr;

}; // struct BoundingBox_tensor_

typedef ::darknet_ros_msgs::BoundingBox_tensor_<std::allocator<void> > BoundingBox_tensor;

typedef boost::shared_ptr< ::darknet_ros_msgs::BoundingBox_tensor > BoundingBox_tensorPtr;
typedef boost::shared_ptr< ::darknet_ros_msgs::BoundingBox_tensor const> BoundingBox_tensorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::darknet_ros_msgs::BoundingBox_tensor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::darknet_ros_msgs::BoundingBox_tensor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::darknet_ros_msgs::BoundingBox_tensor_<ContainerAllocator1> & lhs, const ::darknet_ros_msgs::BoundingBox_tensor_<ContainerAllocator2> & rhs)
{
  return lhs.probability == rhs.probability &&
    lhs.top == rhs.top &&
    lhs.left == rhs.left &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.id == rhs.id &&
    lhs.Class == rhs.Class;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::darknet_ros_msgs::BoundingBox_tensor_<ContainerAllocator1> & lhs, const ::darknet_ros_msgs::BoundingBox_tensor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace darknet_ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::darknet_ros_msgs::BoundingBox_tensor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::darknet_ros_msgs::BoundingBox_tensor_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::darknet_ros_msgs::BoundingBox_tensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::darknet_ros_msgs::BoundingBox_tensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::darknet_ros_msgs::BoundingBox_tensor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::darknet_ros_msgs::BoundingBox_tensor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::darknet_ros_msgs::BoundingBox_tensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3404e61b484e6906df294d1085fb25b8";
  }

  static const char* value(const ::darknet_ros_msgs::BoundingBox_tensor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3404e61b484e6906ULL;
  static const uint64_t static_value2 = 0xdf294d1085fb25b8ULL;
};

template<class ContainerAllocator>
struct DataType< ::darknet_ros_msgs::BoundingBox_tensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "darknet_ros_msgs/BoundingBox_tensor";
  }

  static const char* value(const ::darknet_ros_msgs::BoundingBox_tensor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::darknet_ros_msgs::BoundingBox_tensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 probability\n"
"int64 top\n"
"int64 left\n"
"int64 width\n"
"int64 height\n"
"int16 id\n"
"string Class\n"
;
  }

  static const char* value(const ::darknet_ros_msgs::BoundingBox_tensor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::darknet_ros_msgs::BoundingBox_tensor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.probability);
      stream.next(m.top);
      stream.next(m.left);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.id);
      stream.next(m.Class);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BoundingBox_tensor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::darknet_ros_msgs::BoundingBox_tensor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::darknet_ros_msgs::BoundingBox_tensor_<ContainerAllocator>& v)
  {
    s << indent << "probability: ";
    Printer<double>::stream(s, indent + "  ", v.probability);
    s << indent << "top: ";
    Printer<int64_t>::stream(s, indent + "  ", v.top);
    s << indent << "left: ";
    Printer<int64_t>::stream(s, indent + "  ", v.left);
    s << indent << "width: ";
    Printer<int64_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<int64_t>::stream(s, indent + "  ", v.height);
    s << indent << "id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.id);
    s << indent << "Class: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Class);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DARKNET_ROS_MSGS_MESSAGE_BOUNDINGBOX_TENSOR_H
